{"ref":"1d9d3c17-b735-4894-a554-96f749d3e4e2","syncData":{"version":1,"machineId":"a9ff9ea5-b4c6-4b3b-bf49-15156b9fae6d","content":"{\"bash.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.\\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Embed Python in Bash\\\": {\\n\\t\\t\\\"prefix\\\": \\\"pyt\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t\\t\\\"python - << EOF #embedded python script\\\",\\n\\t\\t\\t\\\"${1:#code - system variables are still accessed $1}\\\",\\n\\t\\t\\t\\\"EOF\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Embed Python in Bash\\\"\\n\\t},\\n}\\n\",\"c.json\":\"{\\n  // Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n\\n  \\\"Basic Skeleton\\\": {\\n    \\\"prefix\\\": \\\"ske\\\",\\n    \\\"body\\\": [\\n      \\\"#include <stdio.h>\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $0\\\",\\n      \\\"    printf(\\\\\\\"%s\\\\\\\",\\\\\\\"\\\\\\\\n\\\\\\\");\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Skeleton for C\\\"\\n  },\\n\\n  \\\"function_program\\\": {\\n    \\\"prefix\\\": \\\"fu\\\",\\n    \\\"body\\\": [\\n      \\\"#include <stdio.h>\\\",\\n      \\\"\\\",\\n      \\\"$1 $2($3);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $2($5);\\\",\\n      \\\"    $6printf(\\\\\\\"%s\\\\\\\",\\\\\\\"\\\\\\\\n\\\\\\\");\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"\\\",\\n      \\\"${1:return_type} ${2:function_name}($3)\\\",\\n      \\\"{\\\",\\n      \\\"    ${4:definiton}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Function with a main()\\\"\\n  },\\n\\n  \\\"Hello World\\\": {\\n    \\\"prefix\\\": \\\"hel\\\",\\n    \\\"body\\\": [\\n      \\\"#include <stdio.h>\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    printf(\\\\\\\"Hello, World!!\\\\\\\\n\\\\\\\");\\\",\\n      \\\"    $0return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Simple Hello world program for checking the compiler\\\"\\n  },\\n\\n  // competitive\\n  \\\"Input cases\\\": {\\n    \\\"prefix\\\": \\\"ipc\\\",\\n    \\\"body\\\": [\\n\\t  \\\"#include <stdio.h>\\\",\\n\\t  \\\"#include <stdlib.h>\\\",\\n\\t  \\\"\\\",\\n      \\\"void func(${1:arra_type} *arr, int n);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    int cases = 0;\\\",\\n      \\\"    scanf(\\\\\\\"%d\\\\\\\", &cases);\\\",\\n      \\\"    $1 **ip = ($1**)malloc(cases * sizeof($1*));\\\",\\n      \\\"    int *num_args = (int*)malloc(cases * sizeof(int));\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"    {\\\",\\n      \\\"        scanf(\\\\\\\"%d\\\\\\\", &num_args[i]);\\\",\\n      \\\"        ip[i] = ($1*)malloc(sizeof($1)*num_args[i]);\\\",\\n      \\\"        for (int j = 0; j < num_args[i]; j++)\\\",\\n      \\\"            scanf(\\\\\\\"${2:output_flag}\\\\\\\", &ip[i][j]);\\\",\\n      \\\"    }\\\",\\n      \\\"    // io done\\\",\\n      \\\"\\\",\\n      \\\"    // output\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        func(ip[i], num_args[i]);\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"void func($1 *arr, int n)\\\",\\n      \\\"{\\\",\\n      \\\"    // Focus on the array and the problem\\\",\\n      \\\"    ${3://definition}\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Input cases\\\"\\n  },\\n  // graphical\\n  \\\"Long line - just\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\n      \\\"cout<<\\\\\\\"\\\\\\\\n-------------------------------------------------------------\\\\\\\\n\\\\\\\";$0\\\"\\n    ],\\n    \\\"description\\\": \\\"A big line for console\\\"\\n  }\\n}\\n\",\"code-runner-output.json\":\"{\\n\\t// Place your snippets for code-runner-output here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"cpp.json\":\"{\\n  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n\\n  \\\"Basic Skeleton\\\": {\\n    \\\"prefix\\\": \\\"ske\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $0\\\",\\n      \\\"    cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Skeleton for cpp\\\"\\n  },\\n  \\\"File I/O\\\": {\\n  \\\"prefix\\\": \\\"io\\\",\\n  \\\"body\\\": [\\n    \\\"// freopen(\\\\\\\"in.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdin);\\\",\\n    \\\"// freopen(\\\\\\\"out.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdout);\\\\n\\\"\\n  ],\\n  \\\"description\\\": \\\"Standard input/output from local files\\\"\\n},\\n\\n  \\\"function_program\\\": {\\n    \\\"prefix\\\": \\\"fun\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"$1 $2($3);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $2($5);\\\",\\n      \\\"    $6cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"\\\",\\n      \\\"${1:return_type} ${2:function_name}($3)\\\",\\n      \\\"{\\\",\\n      \\\"    ${4:definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Function with a main()\\\"\\n  },\\n\\n  \\\"class_program\\\": {\\n    \\\"prefix\\\": \\\"cla\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"class $1\\\",\\n      \\\"{\\\",\\n      \\\"private:\\\",\\n      \\\"    $2\\\",\\n      \\\"public:\\\",\\n      \\\"    $3\\\",\\n      \\\"};\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $1 $4;\\\",\\n      \\\"    $5cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Class and a main()\\\"\\n  },\\n  \\\"Hello World\\\": {\\n    \\\"prefix\\\": \\\"hel\\\",\\n    \\\"body\\\": \\\"#include <bits/stdc++.h>\\\\nusing namespace std;\\\\n\\\\nint main()\\\\n{\\\\n\\\\tcout << \\\\\\\"Hello, World!!\\\\\\\";\\\\n\\\\t$0cout << endl;\\\\n\\\\treturn 0;\\\\n}\\\",\\n    \\\"description\\\": \\\"Simple Hello world program for checking the compiler\\\"\\n  },\\n\\n  // competitive\\n  \\\"Input cases 1\\\": {\\n    \\\"prefix\\\": \\\"cases_single\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"void func($1 n);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    int cases = 0;\\\",\\n      \\\"    cin >> cases;\\\",\\n      \\\"    $1 *ip = new $1[cases];\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        cin >> ip[i];\\\",\\n      \\\"    // io done\\\",\\n      \\\"\\\",\\n      \\\"    // output\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        func(ip[i]);\\\\n\\\",\\n      \\\"    // deallocating memory\\\",\\n      \\\"    delete ip;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"void func(${1:data_type} n)\\\",\\n      \\\"{\\\",\\n      \\\"    // Focus on the array and the problem\\\",\\n      \\\"    ${2://definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard array i/p for websites\\\"\\n  },\\n\\n  // competitive 2\\n  \\\"Input cases 2\\\": {\\n    \\\"prefix\\\": \\\"cases_array\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"void func($1 arr[], int n);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    int cases = 0;\\\",\\n      \\\"    cin >> cases;\\\",\\n      \\\"    $1 **ip = new $1*[cases];\\\",\\n      \\\"    int *num_args = new int[cases];\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"    {\\\",\\n      \\\"        cin >> num_args[i];\\\",\\n      \\\"        ip[i] = new $1[num_args[i]];\\\",\\n      \\\"        for (int j = 0; j < num_args[i]; j++)\\\",\\n      \\\"            cin >> ip[i][j];\\\",\\n      \\\"    }\\\",\\n      \\\"    // io done\\\",\\n      \\\"\\\",\\n      \\\"    // output\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        func(ip[i], num_args[i]);\\\\n\\\",\\n      \\\"    // deallocating memory\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        delete ip[i];\\\",\\n      \\\"    delete[] ip;\\\",\\n      \\\"    delete num_args;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"void func(${1:array_type} arr[], int n)\\\",\\n      \\\"{\\\",\\n      \\\"    // Focus on the array and the problem\\\",\\n      \\\"    ${2://definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard array i/p for websites\\\"\\n  },\\n  // competitive 3\\n  \\\"Input cases 3\\\": {\\n    \\\"prefix\\\": \\\"cases_vector\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"void func(vector<${1:vector_type}>&,${2:extra_info});\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    int cases = 0;\\\",\\n      \\\"    cin >> cases;\\\",\\n      \\\"    vector<tuple<vector<$1>, $2>> ip(cases);\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"    {\\\",\\n      \\\"        int num_args;\\\",\\n      \\\"        cin >> num_args;\\\",\\n      \\\"        get<0>(ip[i]).resize(num_args);\\\",\\n      \\\"        for (int j = 0; j < num_args; j++)\\\",\\n      \\\"            cin >> get<0>(ip[i])[j];\\\",\\n      \\\"         //extra arguments\\\",\\n      \\\"         cin >> get<1>(ip[i]);\\\",\\n      \\\"         $3\\\",\\n      \\\"    }\\\",\\n      \\\"    // io done\\\",\\n      \\\"\\\",\\n      \\\"    // output\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"        func(get<0>(ip[i]),get<1>(ip[i]),$4);\\\\n\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"void func(vector<${1:array_type}>&vec, ${5:simplified_arguments})\\\",\\n      \\\"{\\\",\\n      \\\"    // Focus on the array and the problem\\\",\\n      \\\"    ${6://definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Standard array i/p for websites\\\"\\n  },\\n  // Graphical\\n  \\\"Long line - just\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\n      \\\"cout<<\\\\\\\"\\\\\\\\n-------------------------------------------------------------\\\\\\\\n\\\\\\\";$0\\\"\\n    ],\\n    \\\"description\\\": \\\"A big line for console\\\"\\n  }\\n}\\n\",\"css.json\":\"{\\n\\t// Place your snippets for css here. Each snippet is defined under a snippet name and has a prefix, body and \\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the \\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"javascript.json\":\"{\\n\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Delete HTML and CSS\\\": {\\n\\t\\t\\\"prefix\\\": \\\"dhc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"//-------> PLACE ON TOP Deletes HTML and CSS <-------\\\",\\n\\t\\t  \\\"for (let i = Number(document.body.innerHTML = \\\\\\\"\\\\\\\"), head = document.head.children, j = head.length; i < j; i++)\\\",\\n\\t\\t  \\\"  if (head[i].tagName === \\\\\\\"LINK\\\\\\\") head[i].setAttribute(\\\\\\\"href\\\\\\\", \\\\\\\"\\\\\\\");\\\",\\n\\t\\t  \\\"//-------End Snippet-------\\\",\\n\\t\\t  \\\"\\\",\\n\\t\\t  \\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Delete HTML and CSS\\\"\\n\\t  },\\n\\t  \\\"Copy to Clipboard\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ccli\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"(function (elementObjToBeCopied) {\\\",\\n\\t\\t  \\\"  let tempCopyClipboardTextArea = document.createElement(\\\\\\\"textarea\\\\\\\");\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.value =\\\",\\n\\t\\t  \\\"    \\\\\\\"value\\\\\\\" in elementObjToBeCopied\\\",\\n\\t\\t  \\\"      ? elementObjToBeCopied.value\\\",\\n\\t\\t  \\\"      : elementObjToBeCopied.textContent;\\\",\\n\\t\\t  \\\"  document.body.appendChild(tempCopyClipboardTextArea);\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.select();\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.setSelectionRange(0, 99999);\\\",\\n\\t\\t  \\\"  document.execCommand(\\\\\\\"copy\\\\\\\");\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.remove();\\\",\\n\\t\\t  \\\"})(${1:source});\\\",\\n\\t\\t  \\\"\\\",\\n\\t\\t  \\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Copy to Clipboard\\\"\\n\\t  }\\n}\\n\",\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"JS Empty Fragment\\\": {\\n\\t\\t\\\"prefix\\\": \\\"frag\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"(<></>)'$0'\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"JS Empty Fragment\\\"\\n\\t  }\\n}\\n\",\"md.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and\\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope\\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is\\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.\\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\n\\n}\\n\",\"md.json.code-snippets\":\"{\\n\\t// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and \\n\\t// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope \\n\\t// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is \\n\\t// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: \\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. \\n\\t// Placeholders with the same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"scope\\\": \\\"javascript,typescript\\\",\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n}\",\"python.json\":\"{\\n  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n  \\\"Main(driver)\\\": {\\n    \\\"prefix\\\": [\\\"main\\\", \\\"name\\\", \\\"__name__\\\"],\\n    \\\"body\\\": [\\\"if __name__ == '__main__':\\\\n\\\\t${0:pass}\\\"],\\n    \\\"description\\\": \\\"Main section\\\"\\n  },\\n  \\\"Long line\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\\"print('----------------------------------------')\\\\n$0\\\"],\\n    \\\"description\\\": \\\"horizontal seperator size 40\\\"\\n  },\\n  \\\"File IO\\\": {\\n    \\\"prefix\\\": [\\\"io\\\", \\\"fileio\\\"],\\n    \\\"body\\\": [\\n      \\\"import sys\\\",\\n      \\\"sys.stdin = open(\\\\\\\"in.txt\\\\\\\", \\\\\\\"r\\\\\\\")\\\\n\\\",\\n      \\\"#sys.stdin = open(\\\\\\\"out.txt\\\\\\\", \\\\\\\"r\\\\\\\")\\\\n\\\"\\n    ]\\n  },\\n  \\\"Competitive Programming\\\": {\\n    \\\"prefix\\\": [\\\"comp\\\", \\\"cases\\\"],\\n    \\\"body\\\": [\\n      \\\"def func1($2): # Solve and output\\\",\\n      \\\"    ${3:pass}\\\",\\n      \\\"\\\",\\n      \\\"if __name__ == '__main__':\\\",\\n      \\\"    cases = 1 ${1:#}; cases = int(input())\\\",\\n      \\\"    for i in range(cases):\\\",\\n      \\\"        ${2:inputs,}_, *_ = [*map(int, filter(len, input().split(' '))), None]\\\",\\n      \\\"        func1($2)\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"\\\"\\n  },\\n  \\\"Scripting Skeleton for Python\\\": {\\n    \\\"prefix\\\": [\\\"scr\\\", \\\"sh\\\"],\\n    \\\"body\\\": [\\n      \\\"#!/usr/bin/env python3\\\",\\n      \\\"\\\\n${1:#code}\\\",\\n      \\\"\\\\ndef driver():\\\\n\\\\t${2:pass}\\\",\\n      \\\"\\\\nif __name__ == '__main__':\\\",\\n      \\\"\\\\tdriver()$3\\\"\\n    ],\\n    \\\"description\\\": \\\"Scripting Skeleton for Python3\\\"\\n  },\\n  \\\"Selenium boilerplate\\\": {\\n    \\\"prefix\\\": \\\"sel\\\",\\n    \\\"body\\\": [\\n      \\\"from webdriver_manager.chrome import ChromeDriverManager\\\",\\n      \\\"from selenium import webdriver\\\",\\n      \\\"browser = webdriver.Chrome(ChromeDriverManager().install())\\\",\\n      \\\"browser.get('${1:https://www.google.com}')\\\",\\n      \\\"${0}\\\"\\n    ],\\n    \\\"description\\\": \\\"Selenium boilerplate for python3\\\"\\n  }\\n}\\n\",\"java.json\":\"{\\n\\t// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t//https://macromates.com/manual/en/environment_variables\\n\\n\\t\\\"Basic Skeleton\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ske\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"public class $TM_FILENAME_BASE {\\\",\\n\\t\\t  \\\"\\\\tpublic static void main(String[] args) {\\\",\\n\\t\\t  \\\"\\\\t\\\\t${0:$TM_FILENAME_BASE x = new $TM_FILENAME_BASE();}\\\",\\n\\t\\t  \\\"\\\\t}\\\",\\n\\t\\t  \\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Skeleton for java\\\"\\n\\t  },\\n}\\n\"}"}}