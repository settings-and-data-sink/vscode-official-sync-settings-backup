{"version":1,"content":"{\"c.json\":\"{\\n  // Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n\\n  \\\"Basic Skeleton\\\": {\\n    \\\"prefix\\\": \\\"ske\\\",\\n    \\\"body\\\": [\\n      \\\"#include <stdio.h>\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $0\\\",\\n      \\\"    printf(\\\\\\\"%s\\\\\\\",\\\\\\\"\\\\\\\\n\\\\\\\");\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Skeleton for C\\\"\\n  },\\n  // line\\n  \\\"Long line - just\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\n      \\\"cout<<\\\\\\\"\\\\\\\\n-------------------------------------------------------------\\\\\\\\n\\\\\\\";$0\\\"\\n    ],\\n    \\\"description\\\": \\\"A big line for console\\\"\\n  }\\n}\\n\",\"cpp.json\":\"{\\n  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n\\n  \\\"Basic Skeleton\\\": {\\n    \\\"prefix\\\": \\\"ske\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $0\\\",\\n      \\\"    cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Skeleton for cpp\\\"\\n  },\\n   // line\\n   \\\"Long line - just\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\n      \\\"cout<<\\\\\\\"\\\\\\\\n-------------------------------------------------------------\\\\\\\\n\\\\\\\";$0\\\"\\n    ],\\n    \\\"description\\\": \\\"A big line for console\\\"\\n  },\\n  \\\"File I/O\\\": {\\n  \\\"prefix\\\": \\\"io\\\",\\n  \\\"body\\\": [\\n    \\\"// freopen(\\\\\\\"in.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdin);\\\",\\n    \\\"// freopen(\\\\\\\"out.txt\\\\\\\", \\\\\\\"r\\\\\\\", stdout);\\\\n\\\"\\n  ],\\n  \\\"description\\\": \\\"Standard input/output from local files\\\"\\n},\\n\\n  \\\"function_program\\\": {\\n    \\\"prefix\\\": \\\"fun\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"$1 $2($3);\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $2($5);\\\",\\n      \\\"    $6cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"\\\",\\n      \\\"${1:return_type} ${2:function_name}($3)\\\",\\n      \\\"{\\\",\\n      \\\"    ${4:definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"Function with a main()\\\"\\n  },\\n\\n  \\\"class_program\\\": {\\n    \\\"prefix\\\": \\\"cla\\\",\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"class $1\\\",\\n      \\\"{\\\",\\n      \\\"private:\\\",\\n      \\\"    $2\\\",\\n      \\\"public:\\\",\\n      \\\"    $3\\\",\\n      \\\"};\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    $1 $4;\\\",\\n      \\\"    $5cout << endl;\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\"\\n    ],\\n    \\\"description\\\": \\\"Class and a main()\\\"\\n  },\\n  \\\"Hello World\\\": {\\n    \\\"prefix\\\": \\\"hel\\\",\\n    \\\"body\\\": \\\"#include <bits/stdc++.h>\\\\nusing namespace std;\\\\n\\\\nint main()\\\\n{\\\\n\\\\tcout << \\\\\\\"Hello, World!!\\\\\\\";\\\\n\\\\t$0cout << endl;\\\\n\\\\treturn 0;\\\\n}\\\",\\n    \\\"description\\\": \\\"Simple Hello world program for checking the compiler\\\"\\n  },\\n\\n  // competitive\\n  \\\"Input cases\\\": {\\n    \\\"prefix\\\": [\\\"comp\\\", \\\"cases\\\"],\\n    \\\"body\\\": [\\n      \\\"#include <bits/stdc++.h>\\\",\\n      \\\"using namespace std;\\\",\\n      \\\"\\\",\\n      \\\"void func1(${2:int n})\\\",\\n      \\\"{\\\",\\n      \\\"    // Solve and output\\\",\\n      \\\"    ${5://definition}\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n      \\\"int main()\\\",\\n      \\\"{\\\",\\n      \\\"    int cases = 1;\\\",\\n      \\\"    ${1://}cin >> cases; // cases - optional\\\",\\n      \\\"\\\",\\n      \\\"    ${2://variable declarations};\\\",\\n      \\\"\\\",\\n      \\\"    for (int i = 0; i < cases; i++)\\\",\\n      \\\"    {\\\",\\n      \\\"        ${3:cin >> }; //take input\\\",\\n      \\\"        func1($4); // pass args\\\\n\\\\t}\\\",\\n      \\\"    return 0;\\\",\\n      \\\"}\\\",\\n      \\\"\\\",\\n    ],\\n    \\\"description\\\": \\\"Standard array i/p for websites\\\"\\n  },\\n}\\n\",\"java.json\":\"{\\n\\t// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t//https://macromates.com/manual/en/environment_variables\\n\\n\\t\\\"Basic Skeleton\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ske\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"public class $TM_FILENAME_BASE {\\\",\\n\\t\\t  \\\"\\\\tpublic static void main(String[] args) {\\\",\\n\\t\\t  \\\"\\\\t\\\\t${0:$TM_FILENAME_BASE x = new $TM_FILENAME_BASE();}\\\",\\n\\t\\t  \\\"\\\\t}\\\",\\n\\t\\t  \\\"}\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Skeleton for java\\\"\\n\\t  },\\n}\\n\",\"python.json\":\"{\\n  // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and\\n  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n  // same ids are connected.\\n  // Example:\\n  // \\\"Print to console\\\": {\\n  // \\t\\\"prefix\\\": \\\"log\\\",\\n  // \\t\\\"body\\\": [\\n  // \\t\\t\\\"console.log('$1');\\\",\\n  // \\t\\t\\\"$2\\\"\\n  // \\t],\\n  // \\t\\\"description\\\": \\\"Log output to console\\\"\\n  // }\\n  \\\"Main(driver)\\\": {\\n    \\\"prefix\\\": [\\\"main\\\", \\\"name\\\", \\\"__name__\\\"],\\n    \\\"body\\\": [\\\"if __name__ == '__main__':\\\\n\\\\t${0:pass}\\\"],\\n    \\\"description\\\": \\\"Main section\\\"\\n  },\\n  \\\"Long line\\\": {\\n    \\\"prefix\\\": \\\"line\\\",\\n    \\\"body\\\": [\\\"print('----------------------------------------')\\\\n$0\\\"],\\n    \\\"description\\\": \\\"horizontal seperator size 40\\\"\\n  },\\n  \\\"File IO\\\": {\\n    \\\"prefix\\\": [\\\"io\\\", \\\"fileio\\\"],\\n    \\\"body\\\": [\\n      \\\"import sys\\\",\\n      \\\"sys.stdin = open(\\\\\\\"in.txt\\\\\\\", \\\\\\\"r\\\\\\\")\\\\n\\\",\\n      \\\"#sys.stdin = open(\\\\\\\"out.txt\\\\\\\", \\\\\\\"r\\\\\\\")\\\\n\\\"\\n    ]\\n  },\\n  \\\"Competitive Programming\\\": {\\n    \\\"prefix\\\": [\\\"comp\\\", \\\"cases\\\"],\\n    \\\"body\\\": [\\n      \\\"def func1($2): # Solve and output\\\",\\n      \\\"    ${3:pass}\\\",\\n      \\\"\\\",\\n      \\\"if __name__ == '__main__':\\\",\\n      \\\"    cases = 1 ${1:#}; cases = int(input())\\\",\\n      \\\"    for i in range(cases):\\\",\\n      \\\"        ${2:inputs,}_, *_ = [*map(int, filter(len, input().split(' '))), None]\\\",\\n      \\\"        func1($2)\\\",\\n      \\\"\\\"\\n    ],\\n    \\\"description\\\": \\\"\\\"\\n  },\\n  \\\"Scripting Skeleton for Python\\\": {\\n    \\\"prefix\\\": [\\\"scr\\\", \\\"sh\\\"],\\n    \\\"body\\\": [\\n      \\\"#!/usr/bin/env python3\\\",\\n      \\\"\\\\n${1:#code}\\\",\\n      \\\"\\\\ndef driver():\\\\n\\\\t${2:pass}\\\",\\n      \\\"\\\\nif __name__ == '__main__':\\\",\\n      \\\"\\\\tdriver()$3\\\"\\n    ],\\n    \\\"description\\\": \\\"Scripting Skeleton for Python3\\\"\\n  },\\n  \\\"Selenium boilerplate\\\": {\\n    \\\"prefix\\\": \\\"sel\\\",\\n    \\\"body\\\": [\\n      \\\"from webdriver_manager.chrome import ChromeDriverManager\\\",\\n      \\\"from selenium import webdriver\\\",\\n      \\\"browser = webdriver.Chrome(ChromeDriverManager().install())\\\",\\n      \\\"browser.get('${1:https://www.google.com}')\\\",\\n      \\\"${0}\\\"\\n    ],\\n    \\\"description\\\": \\\"Selenium boilerplate for python3\\\"\\n  }\\n}\\n\",\"javascript.json\":\"{\\n\\t// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"Delete HTML and CSS\\\": {\\n\\t\\t\\\"prefix\\\": \\\"dhc\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"//-------> PLACE ON TOP Deletes HTML and CSS <-------\\\",\\n\\t\\t  \\\"for (let i = Number(document.body.innerHTML = \\\\\\\"\\\\\\\"), head = document.head.children, j = head.length; i < j; i++)\\\",\\n\\t\\t  \\\"  if (head[i].tagName === \\\\\\\"LINK\\\\\\\") head[i].setAttribute(\\\\\\\"href\\\\\\\", \\\\\\\"\\\\\\\");\\\",\\n\\t\\t  \\\"//-------End Snippet-------\\\",\\n\\t\\t  \\\"\\\",\\n\\t\\t  \\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Delete HTML and CSS\\\"\\n\\t  },\\n\\t  \\\"Copy to Clipboard\\\": {\\n\\t\\t\\\"prefix\\\": \\\"ccli\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"(function (elementObjToBeCopied) {\\\",\\n\\t\\t  \\\"  let tempCopyClipboardTextArea = document.createElement(\\\\\\\"textarea\\\\\\\");\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.value =\\\",\\n\\t\\t  \\\"    \\\\\\\"value\\\\\\\" in elementObjToBeCopied\\\",\\n\\t\\t  \\\"      ? elementObjToBeCopied.value\\\",\\n\\t\\t  \\\"      : elementObjToBeCopied.textContent;\\\",\\n\\t\\t  \\\"  document.body.appendChild(tempCopyClipboardTextArea);\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.select();\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.setSelectionRange(0, 99999);\\\",\\n\\t\\t  \\\"  document.execCommand(\\\\\\\"copy\\\\\\\");\\\",\\n\\t\\t  \\\"  tempCopyClipboardTextArea.remove();\\\",\\n\\t\\t  \\\"})(${1:source});\\\",\\n\\t\\t  \\\"\\\",\\n\\t\\t  \\\"$0\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"Copy to Clipboard\\\"\\n\\t  }\\n}\\n\",\"javascriptreact.json\":\"{\\n\\t// Place your snippets for javascriptreact here. Each snippet is defined under a snippet name and has a prefix, body and\\n\\t// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:\\n\\t// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the\\n\\t// same ids are connected.\\n\\t// Example:\\n\\t// \\\"Print to console\\\": {\\n\\t// \\t\\\"prefix\\\": \\\"log\\\",\\n\\t// \\t\\\"body\\\": [\\n\\t// \\t\\t\\\"console.log('$1');\\\",\\n\\t// \\t\\t\\\"$2\\\"\\n\\t// \\t],\\n\\t// \\t\\\"description\\\": \\\"Log output to console\\\"\\n\\t// }\\n\\t\\\"JS Empty Fragment\\\": {\\n\\t\\t\\\"prefix\\\": \\\"frag\\\",\\n\\t\\t\\\"body\\\": [\\n\\t\\t  \\\"(<></>)'$0'\\\"\\n\\t\\t],\\n\\t\\t\\\"description\\\": \\\"JS Empty Fragment\\\"\\n\\t  }\\n}\\n\"}"}